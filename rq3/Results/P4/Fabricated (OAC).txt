package business.event;



import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;

import business.util.Triplet;

import business.producer.Producer;
import business.ticket.Ticket;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;


/**
 * Test class of Event.
 * It contains 10 unit test cases for the
 * setProducerNumber(int) method.
 */
 class EventTest {

Completion:


    /**
     * Test case for setProducerNumber(int) method.
     * It tests the case when the producer number is positive.
     */
    @Test
    void testSetProducerNumberPositive() {
        Event event = new Event();
        event.setProducerNumber(1);
        assertEquals(1, event.getProducerNumber());
    }
    
    /**
     * Test case for setProducerNumber(int) method.
     * It tests the case when the producer number is zero.
     */
    @Test
    void testSetProducerNumberZero() {
        Event event = new Event();
        event.setProducerNumber(0);
        assertEquals(0, event.getProducerNumber());
    }
    
    /**
     * Test case for setProducerNumber(int) method.
     * It tests the case when the producer number is negative.
     */
    @Test
    void testSetProducerNumberNegative() {
        Event event = new Event();
        event.setProducerNumber(-1);
        assertEquals(-1, event.getProducerNumber());
    }
    
    /**
     * Test case for setProducerNumber(int) method.
     * It tests the case when the producer number is the maximum value.
     */
    @Test
    void testSetProducerNumberMax() {
        Event event = new Event();
        event.setProducerNumber(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, event.getProducerNumber());
    }
    
    /**
     * Test case for setProducerNumber(int) method.
     * It tests the case when the producer number is the minimum value.
     */
    @Test
    void testSetProducerNumberMin() {
        Event event = new Event();
        event.setProducerNumber(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, event.getProducerNumber());
    }
    
    /**
     * Test case for setProducerNumber(int) method.
     * It tests the case when the producer number is the maximum value.
     */
    @Test
    void testSetProducerNumberMaxPlusOne() {
        Event event = new Event();
        assertThrows(IllegalArgumentException.class, () -> {
            event.setProducerNumber(Integer.MAX_VALUE + 1);
        });
    }
    
    /**
     * Test case for setProducerNumber(int) method.
     * It tests the case when the producer number is the minimum value.
     */
    @Test
    void testSetProducerNumberMinMinusOne() {
        Event event = new Event();
        assertThrows(IllegalArgumentException.class, () -> {
            event.setProducerNumber(Integer.MIN_VALUE - 1