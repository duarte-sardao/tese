package com.squareup.okhttp;

import com.squareup.okhttp.internal.Util;
import com.squareup.okhttp.internal.http.HttpAuthenticator;
import com.squareup.okhttp.internal.http.HttpURLConnectionImpl;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCache;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import com.squareup.okhttp.internal.tls.OkHostnameVerifier;
import java.net.CookieHandler;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URL;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;


/**
 * Test class of OkHttpClient.
 * It contains 10 unit test cases for the
 * copyWithDefaults() method.
 */
 class OkHttpClientTest {

Completion:


  /**
   * Test case 1: Test copyWithDefaults() method.
   * The method is called with a new OkHttpClient object.
   * The method should return a new OkHttpClient object.
   */
  @Test
  void testCopyWithDefaults1() {
    OkHttpClient client = new OkHttpClient();
    OkHttpClient copy = client.copyWithDefaults();
    assertNotSame(client, copy);
  }

  /**
   * Test case 2: Test copyWithDefaults() method.
   * The method is called with a new OkHttpClient object.
   * The method should return a new OkHttpClient object
   * with the same values as the original object.
   */
  @Test
  void testCopyWithDefaults2() {
    OkHttpClient client = new OkHttpClient();
    OkHttpClient copy = client.copyWithDefaults();
    assertEquals(client.getAuthenticator(), copy.getAuthenticator());
    assertEquals(client.getCache(), copy.getCache());
    assertEquals(client.getCookieHandler(), copy.getCookieHandler());
    assertEquals(client.getFollowRedirects(), copy.getFollowRedirects());
    assertEquals(client.getFollowSslRedirects(), copy.getFollowSslRedirects());
    assertEquals(client.getHostnameVerifier(), copy.getHostnameVerifier());
    assertEquals(client.getProxy(), copy.getProxy());
    assertEquals(client.getProxySelector(), copy.getProxySelector());
    assertEquals(client.getResponseCache(), copy.getResponseCache());
    assertEquals(client.getSslSocketFactory(), copy.getSslSocketFactory());
  }

  /**
   * Test case 3: Test copyWithDefaults() method.
   * The method is called with a new OkHttpClient object
   * with a custom authenticator.
   * The method should return a new OkHttpClient object
   * with the same values as the original object.
   */
  @Test
  void testCopyWithDefaults3() {
    OkHttpClient client = new OkHttpClient();
    client.setAuthenticator(new HttpAuthenticator());
    OkHttpClient copy = client.copyWithDefaults();
    assertEquals(client.getAuthenticator(), copy.getAuthenticator());
    assertEquals(client.getCache(), copy.getCache());
    assertEquals(client.getCookieHandler(), copy.getCookieHandler());
    assertEquals(client.getFollowRedirects(), copy.getFollowRedirects());
    assertEquals(client.getFollowSslRedirects(), copy.getFollowSslRedirects());
    assertEquals(client.getHostnameVerifier(), copy.getHostnameVerifier());
    assertEquals(client.getProxy(), copy.getProxy());
    assertEquals(client.getProxySelector(), copy.getProxySelector());
    assertEquals(client.getResponseCache(), copy.getResponseCache());
    assertEquals(client.getSslSocket