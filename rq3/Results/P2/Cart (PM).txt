Prompt:
//Cart.java
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Cart {
    private List<Item> cartItems;
    private final User user;

    private static final Map<String, Double> discounts = Collections.unmodifiableMap(new HashMap<>() {{
        put("loyal", 0.1d);
        put("superpromo", 0.25d);
        put("30ff", 0.3d);
        put("2024", 0.2d);
    }});


    public Cart(User user) {
        this.user = user;
    }

    public double sum_items() {
        double sum = 0;
        for(Item item: cartItems) {
            if(item.coupon)
                sum -= item.value*item.amount;
            else
                sum += item.value*item.amount;
        }
        return sum;
    }
    public double total_cost(double discount) {
        double sum = sum_items();
        return sum - sum * discount;
    }

    public void add_item(Item item) {
        cartItems.add(item);
    }
    public void checkout(String code) {
        double cost = total_cost(discounts.get(code));
        user.balance -= cost;
        cartItems.clear();
    }
}

//CartTest.java
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;


/**
 * Test class of Cart.
 * It contains 10 unit test cases for the
 * sum_items() method.
 */
 class CartTest {


Completion:
```java
    private Cart cart;

    @BeforeEach
    void setUp() {
        User user = new User("John", 100.0);
        cart = new Cart(user);
        cart.add_item(new Item("Item1", 10.0, 2, false));
        cart.add_item(new Item("Item2", 20.0, 1, true));
    }

    @Test
    void testSumItemsWithoutCoupon() {
        assertEquals(40.0, cart.sum_items());
    }

    @Test
    void testSumItemsWithCoupon() {
        assertEquals(20.0, cart.sum_items());
    }

    @Test
    void testTotalCostWithDiscount() {
        assertEquals(36.0, cart.total_cost(0.1));
    }

    @Test
    void testTotalCostWithoutDiscount() {
        assertEquals(40.0, cart.total_cost(0.0));
    }

    @Test
    void testAddItem() {
        cart.add_item(new Item("Item3", 15.0, 3, false));
        assertEquals(55.0, cart.sum_items());
    }

    @Test
    void testCheckoutWithDiscount() {
        cart.checkout("loyal");
        assertEquals(56.0, cart.user.balance);
        assertTrue(cart.cartItems.isEmpty());
    }

    @Test
    void testCheckoutWithoutDiscount() {
        cart.checkout("invalid");
        assertEquals(60.0, cart.user.balance);
        assertTrue(cart.cartItems.isEmpty());
    }

    @Test
    void testCheckoutWithSuperPromo() {
        cart.checkout("superpromo");
        assertEquals(45.0, cart.user.balance);
        assertTrue(cart.cartItems.isEmpty());
    }

    @Test
    void testCheckoutWithInvalidCode() {
        cart.checkout("invalid");
        assertEquals(60.0, cart.user.balance);
        assertTrue(cart.cartItems.isEmpty());
    }
}
```