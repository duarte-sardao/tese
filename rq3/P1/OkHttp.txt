"copyWithDefaults()"
public final class OkHttpClient {
  private static final List<String> DEFAULT_TRANSPORTS
      = Util.immutableList(Arrays.asList("spdy/3", "http/1.1"));
  private Proxy proxy;
  private List<String> transports;
  private final Set<Route> failedRoutes;
  private ProxySelector proxySelector;
  private CookieHandler cookieHandler;
  private ResponseCache responseCache;
  private SSLSocketFactory sslSocketFactory;
  private HostnameVerifier hostnameVerifier;
  private OkAuthenticator authenticator;
  private ConnectionPool connectionPool;
  private boolean followProtocolRedirects = true;
  public OkHttpClient();
  private OkHttpClient(OkHttpClient);
  public OkHttpClient setProxy(Proxy);
  public Proxy getProxy();
  public OkHttpClient setProxySelector(ProxySelector);
  public ProxySelector getProxySelector();
  public OkHttpClient setCookieHandler(CookieHandler);
  public CookieHandler getCookieHandler();
  public OkHttpClient setResponseCache(ResponseCache);
  public ResponseCache getResponseCache();
  private OkResponseCache okResponseCache();
  public OkHttpClient setSSLSocketFactory(SSLSocketFactory);
  public SSLSocketFactory getSslSocketFactory();
  public OkHttpClient setHostnameVerifier(HostnameVerifier);
  public HostnameVerifier getHostnameVerifier();
  public OkHttpClient setAuthenticator(OkAuthenticator);
  public OkAuthenticator getAuthenticator();
  public OkHttpClient setConnectionPool(ConnectionPool);
  public ConnectionPool getConnectionPool();
  public OkHttpClient setFollowProtocolRedirects(boolean);
  public boolean getFollowProtocolRedirects();
  public OkHttpClient setTransports(List<String>);
  public List<String> getTransports();
  public HttpURLConnection open(URL);
  //Focal Method
  private OkHttpClient copyWithDefaults() {
    OkHttpClient result = new OkHttpClient(this);
    result.proxy = proxy;
    result.proxySelector = proxySelector != null ? proxySelector : ProxySelector.getDefault();
    result.cookieHandler = cookieHandler != null ? cookieHandler : CookieHandler.getDefault();
    result.responseCache = responseCache != null ? responseCache : ResponseCache.getDefault();
    result.sslSocketFactory = sslSocketFactory != null
        ? sslSocketFactory
        : HttpsURLConnection.getDefaultSSLSocketFactory();
    result.hostnameVerifier = hostnameVerifier != null
        ? hostnameVerifier
        : new OkHostnameVerifier();
    result.authenticator = authenticator != null
        ? authenticator
        : HttpAuthenticator.SYSTEM_DEFAULT;
    result.connectionPool = connectionPool != null ? connectionPool : ConnectionPool.getDefault();
    result.followProtocolRedirects = followProtocolRedirects;
    result.transports = transports != null ? transports : DEFAULT_TRANSPORTS;
    return result;
  }
}